// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CollectionsReadCollectionsData, CollectionsReadCollectionsResponse, CollectionsCreateCollectionData, CollectionsCreateCollectionResponse, CollectionsReadCollectionData, CollectionsReadCollectionResponse, CollectionsUpdateCollectionData, CollectionsUpdateCollectionResponse, CollectionsDeleteCollectionData, CollectionsDeleteCollectionResponse, DownloadDownloadAnsPdfData, DownloadDownloadAnsPdfResponse, DownloadDownloadQppdfByCollectionData, DownloadDownloadQppdfByCollectionResponse, EvaluateEvaluateAnswersheetData, EvaluateEvaluateAnswersheetResponse, EvaluationsReadEvaluationsByCollectionData, EvaluationsReadEvaluationsByCollectionResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, UploadCreateAnsPdfFolderData, UploadCreateAnsPdfFolderResponse, UploadReadAnsPdfFoldersData, UploadReadAnsPdfFoldersResponse, UploadUploadAnsPdfData, UploadUploadAnsPdfResponse, UploadReadAnsPdfsData, UploadReadAnsPdfsResponse, UploadUploadAnsPdfToCollectionData, UploadUploadAnsPdfToCollectionResponse, UploadUploadQppdfData, UploadUploadQppdfResponse, UploadReadAnsPdfFolderData, UploadReadAnsPdfFolderResponse, UploadReadAnsPdfData, UploadReadAnsPdfResponse, UploadGetAnsPdfsByCollectionData, UploadGetAnsPdfsByCollectionResponse, UploadReadQppdfsData, UploadReadQppdfsResponse, UploadReadQppdfData, UploadReadQppdfResponse, UploadGetQppdfsByCollectionData, UploadGetQppdfsByCollectionResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class CollectionsService {
    /**
     * Read Collections
     * Retrieve collections.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns CollectionsPublic Successful Response
     * @throws ApiError
     */
    public static readCollections(data: CollectionsReadCollectionsData = {}): CancelablePromise<CollectionsReadCollectionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/collections/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Collection
     * Create a new collection.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CollectionPublic Successful Response
     * @throws ApiError
     */
    public static createCollection(data: CollectionsCreateCollectionData): CancelablePromise<CollectionsCreateCollectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/collections/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Collection
     * Get collection by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns CollectionPublic Successful Response
     * @throws ApiError
     */
    public static readCollection(data: CollectionsReadCollectionData): CancelablePromise<CollectionsReadCollectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/collections/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Collection
     * Update a collection.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns CollectionPublic Successful Response
     * @throws ApiError
     */
    public static updateCollection(data: CollectionsUpdateCollectionData): CancelablePromise<CollectionsUpdateCollectionResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/collections/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Collection
     * Delete a collection.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteCollection(data: CollectionsDeleteCollectionData): CancelablePromise<CollectionsDeleteCollectionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/collections/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DownloadService {
    /**
     * Download Ans Pdf
     * Retrieves and serves the actual PDF file for a given AnsPdf ID.
     * @param data The data for the request.
     * @param data.ansPdfId
     * @returns unknown The PDF file of the answer sheet.
     * @throws ApiError
     */
    public static downloadAnsPdf(data: DownloadDownloadAnsPdfData): CancelablePromise<DownloadDownloadAnsPdfResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/download/ans-pdfs/{ans_pdf_id}/',
            path: {
                ans_pdf_id: data.ansPdfId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Qppdf By Collection
     * Retrieves and serves the most recently uploaded QpPdf for a given collection.
     * @param data The data for the request.
     * @param data.collectionId
     * @returns unknown The PDF file of the question paper.
     * @throws ApiError
     */
    public static downloadQppdfByCollection(data: DownloadDownloadQppdfByCollectionData): CancelablePromise<DownloadDownloadQppdfByCollectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/download/qppdfs/{collection_id}/',
            path: {
                collection_id: data.collectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class EvaluateService {
    /**
     * Evaluate Answersheet
     * Initiate the evaluation for all answer sheets in a collection.
     * @param data The data for the request.
     * @param data.collectionId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static evaluateAnswersheet(data: EvaluateEvaluateAnswersheetData): CancelablePromise<EvaluateEvaluateAnswersheetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/evaluate/{collection_id}/',
            path: {
                collection_id: data.collectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class EvaluationsService {
    /**
     * Read Evaluations By Collection
     * Retrieve all evaluations for a specific collection.
     * @param data The data for the request.
     * @param data.collectionId
     * @param data.skip
     * @param data.limit
     * @returns EvaluationsPublic Successful Response
     * @throws ApiError
     */
    public static readEvaluationsByCollection(data: EvaluationsReadEvaluationsByCollectionData): CancelablePromise<EvaluationsReadEvaluationsByCollectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluations/by-collection/{collection_id}',
            path: {
                collection_id: data.collectionId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UploadService {
    /**
     * Create Ans Pdf Folder
     * Create a new folder for answer sheets and link it to a collection.
     * The folder name will be automatically generated using a UUID.
     * @param data The data for the request.
     * @param data.formData
     * @returns AnsPdfFolderPublic Successful Response
     * @throws ApiError
     */
    public static createAnsPdfFolder(data: UploadCreateAnsPdfFolderData): CancelablePromise<UploadCreateAnsPdfFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/ans-pdf-folders/',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Ans Pdf Folders
     * Retrieve a list of answer sheet folders.
     * Superusers get all folders, regular users get folders from their own collections.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns AnsPdfFoldersPublic Successful Response
     * @throws ApiError
     */
    public static readAnsPdfFolders(data: UploadReadAnsPdfFoldersData = {}): CancelablePromise<UploadReadAnsPdfFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/ans-pdf-folders/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Ans Pdf
     * Upload an answer sheet PDF, convert it to images, and link to an existing AnsPdfFolder.
     * @param data The data for the request.
     * @param data.formData
     * @returns AnsPdfPublic Successful Response
     * @throws ApiError
     */
    public static uploadAnsPdf(data: UploadUploadAnsPdfData): CancelablePromise<UploadUploadAnsPdfResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/ans-pdfs/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Ans Pdfs
     * Retrieve a list of uploaded answer sheet PDFs.
     * Superusers get all PDFs, regular users get PDFs from their own collections.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns AnsPdfsPublic Successful Response
     * @throws ApiError
     */
    public static readAnsPdfs(data: UploadReadAnsPdfsData = {}): CancelablePromise<UploadReadAnsPdfsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/ans-pdfs/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Ans Pdf To Collection
     * Upload an answer sheet PDF, convert it to images, link to a new AnsPdfFolder,
     * and create a database record for each page.
     * @param data The data for the request.
     * @param data.formData
     * @returns AnsPdfPublic Successful Response
     * @throws ApiError
     */
    public static uploadAnsPdfToCollection(data: UploadUploadAnsPdfToCollectionData): CancelablePromise<UploadUploadAnsPdfToCollectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/ans-pdfs/by-collection/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Qppdf
     * Upload a Question Paper (PDF), convert it to images, and link to a collection.
     * @param data The data for the request.
     * @param data.formData
     * @returns QpPdfPublic Successful Response
     * @throws ApiError
     */
    public static uploadQppdf(data: UploadUploadQppdfData): CancelablePromise<UploadUploadQppdfResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/qppdf/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Ans Pdf Folder
     * Get a single answer sheet folder by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns AnsPdfFolderPublic Successful Response
     * @throws ApiError
     */
    public static readAnsPdfFolder(data: UploadReadAnsPdfFolderData): CancelablePromise<UploadReadAnsPdfFolderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/ans-pdf-folders/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Ans Pdf
     * Get a single uploaded answer sheet PDF by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns AnsPdfPublic Successful Response
     * @throws ApiError
     */
    public static readAnsPdf(data: UploadReadAnsPdfData): CancelablePromise<UploadReadAnsPdfResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/ans-pdfs/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ans Pdfs By Collection
     * Retrieve all answer sheet PDFs for a specific collection.
     * @param data The data for the request.
     * @param data.collectionId
     * @param data.skip
     * @param data.limit
     * @returns AnsPdfsPublic Successful Response
     * @throws ApiError
     */
    public static getAnsPdfsByCollection(data: UploadGetAnsPdfsByCollectionData): CancelablePromise<UploadGetAnsPdfsByCollectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/ans-pdfs/by-collection/{collection_id}',
            path: {
                collection_id: data.collectionId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Qppdfs
     * Retrieve a list of uploaded Question Paper PDFs.
     * Superusers get all QpPdfs, regular users get QpPdfs from their own collections.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns QpPdfsPublic Successful Response
     * @throws ApiError
     */
    public static readQppdfs(data: UploadReadQppdfsData = {}): CancelablePromise<UploadReadQppdfsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/qppdfs/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Qppdf
     * Get a single uploaded Question Paper PDF by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns QpPdfPublic Successful Response
     * @throws ApiError
     */
    public static readQppdf(data: UploadReadQppdfData): CancelablePromise<UploadReadQppdfResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/qppdfs/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Qppdfs By Collection
     * Retrieve all question paper PDFs for a specific collection.
     * @param data The data for the request.
     * @param data.collectionId
     * @param data.skip
     * @param data.limit
     * @returns QpPdfsPublic Successful Response
     * @throws ApiError
     */
    public static getQppdfsByCollection(data: UploadGetQppdfsByCollectionData): CancelablePromise<UploadGetQppdfsByCollectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/qppdfs/by-collection/{collection_id}',
            path: {
                collection_id: data.collectionId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}